From 2b14eb3dc8c8f8fc72bc7161b468915a20f7da30 Mon Sep 17 00:00:00 2001
From: hobbsau <adrianhobbs@gmail.com>
Date: Sun, 26 Mar 2017 21:36:32 +1100
Subject: [PATCH] patch_bundle2

---
 .../drivers/net/ethernet/atheros/ag71xx/ag71xx.h   | 20 ++++----
 .../net/ethernet/atheros/ag71xx/ag71xx_main.c      | 56 +++++++++-------------
 2 files changed, 33 insertions(+), 43 deletions(-)

diff --git a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h
index 898bde1d25..8d4f356b5f 100644
--- a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h
+++ b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx.h
@@ -55,11 +55,11 @@
 #define AG71XX_TX_RING_SPLIT		512
 #define AG71XX_TX_RING_DS_PER_PKT	DIV_ROUND_UP(AG71XX_TX_MTU_LEN, \
 						     AG71XX_TX_RING_SPLIT)
-#define AG71XX_TX_RING_SIZE_DEFAULT	128
-#define AG71XX_RX_RING_SIZE_DEFAULT	256
+#define AG71XX_TX_RING_SIZE_DEFAULT	256
+#define AG71XX_RX_RING_SIZE_DEFAULT	512
 
-#define AG71XX_TX_RING_SIZE_MAX		128
-#define AG71XX_RX_RING_SIZE_MAX		256
+#define AG71XX_TX_RING_SIZE_MAX		256
+#define AG71XX_RX_RING_SIZE_MAX		512
 
 #ifdef CONFIG_AG71XX_DEBUG
 #define DBG(fmt, args...)	pr_debug(fmt, ## args)
@@ -98,7 +98,7 @@ struct ag71xx_buf {
 		unsigned long	timestamp;
 	};
 	unsigned int		len;
-};
+} __attribute__((aligned(4)));
 
 struct ag71xx_ring {
 	struct ag71xx_buf	*buf;
@@ -108,14 +108,14 @@ struct ag71xx_ring {
 	u16			order;
 	unsigned int		curr;
 	unsigned int		dirty;
-};
+} __attribute__((aligned(4)));
 
 struct ag71xx_mdio {
 	struct mii_bus		*mii_bus;
 	int			mii_irq[PHY_MAX_ADDR];
 	void __iomem		*mdio_base;
 	struct ag71xx_mdio_platform_data *pdata;
-};
+} __attribute__((aligned(4)));
 
 struct ag71xx_int_stats {
 	unsigned long		rx_pr;
@@ -152,7 +152,7 @@ struct ag71xx {
 
 	spinlock_t		lock;
 	struct platform_device	*pdev;
-	struct net_device	*dev;
+	struct net_device	*dev __attribute__((aligned(4)));
 	struct napi_struct	napi;
 	u32			msg_enable;
 
@@ -162,7 +162,7 @@ struct ag71xx {
 	struct ag71xx_ring	rx_ring;
 	struct ag71xx_ring	tx_ring;
 
-	struct mii_bus		*mii_bus;
+	struct mii_bus		*mii_bus __attribute__((aligned(4)));
 	struct phy_device	*phy_dev;
 	void			*phy_priv;
 
@@ -181,7 +181,7 @@ struct ag71xx {
 #ifdef CONFIG_AG71XX_DEBUG_FS
 	struct ag71xx_debug	debug;
 #endif
-};
+} __attribute__((aligned(4)));
 
 extern struct ethtool_ops ag71xx_ethtool_ops;
 void ag71xx_link_adjust(struct ag71xx *ag);
diff --git a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
index 566e9513d8..82a425e412 100644
--- a/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/target/linux/ar71xx/files/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -200,8 +200,6 @@ static void ag71xx_ring_rx_clean(struct ag71xx *ag)
 
 	for (i = 0; i < ring_size; i++)
 		if (ring->buf[i].rx_buf) {
-			dma_unmap_single(&ag->dev->dev, ring->buf[i].dma_addr,
-					 ag->rx_buf_size, DMA_FROM_DEVICE);
 			skb_free_frag(ring->buf[i].rx_buf);
 		}
 }
@@ -253,19 +251,18 @@ static int ag71xx_ring_rx_init(struct ag71xx *ag)
 	int ring_size = BIT(ring->order);
 	int ring_mask = BIT(ring->order) - 1;
 	unsigned int i;
-	int ret;
+	int ret = 0;
 	int offset = ag71xx_buffer_offset(ag);
 
-	ret = 0;
 	for (i = 0; i < ring_size; i++) {
 		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
 
 		desc->next = (u32) (ring->descs_dma +
 			AG71XX_DESC_SIZE * ((i + 1) & ring_mask));
 
-		DBG("ag71xx: RX desc at %p, next is %08x\n",
+/*		DBG("ag71xx: RX desc at %p, next is %08x\n",
 			desc, desc->next);
-	}
+*/	}
 
 	for (i = 0; i < ring_size; i++) {
 		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
@@ -292,10 +289,9 @@ static int ag71xx_ring_rx_refill(struct ag71xx *ag)
 {
 	struct ag71xx_ring *ring = &ag->rx_ring;
 	int ring_mask = BIT(ring->order) - 1;
-	unsigned int count;
+	unsigned int count = 0;
 	int offset = ag71xx_buffer_offset(ag);
 
-	count = 0;
 	for (; ring->curr - ring->dirty > 0; ring->dirty++) {
 		struct ag71xx_desc *desc;
 		unsigned int i;
@@ -315,7 +311,7 @@ static int ag71xx_ring_rx_refill(struct ag71xx *ag)
 	/* flush descriptors */
 	wmb();
 
-	DBG("%s: %u rx descriptors refilled\n", ag->dev->name, count);
+//	DBG("%s: %u rx descriptors refilled\n", ag->dev->name, count);
 
 	return count;
 }
@@ -638,7 +634,7 @@ __ag71xx_link_adjust(struct ag71xx *ag, bool update)
 			ag71xx_speed_str(ag),
 			(DUPLEX_FULL == ag->duplex) ? "Full" : "Half");
 
-	DBG("%s: fifo_cfg0=%#x, fifo_cfg1=%#x, fifo_cfg2=%#x\n",
+/*	DBG("%s: fifo_cfg0=%#x, fifo_cfg1=%#x, fifo_cfg2=%#x\n",
 		ag->dev->name,
 		ag71xx_rr(ag, AG71XX_REG_FIFO_CFG0),
 		ag71xx_rr(ag, AG71XX_REG_FIFO_CFG1),
@@ -653,7 +649,7 @@ __ag71xx_link_adjust(struct ag71xx *ag, bool update)
 	DBG("%s: mac_cfg2=%#x, mac_ifctl=%#x\n",
 		ag->dev->name,
 		ag71xx_rr(ag, AG71XX_REG_MAC_CFG2),
-		ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL));
+		ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL));*/
 }
 
 void ag71xx_link_adjust(struct ag71xx *ag)
@@ -798,7 +794,7 @@ static netdev_tx_t ag71xx_hard_start_xmit(struct sk_buff *skb,
 		ag71xx_add_ar8216_header(ag, skb);
 
 	if (skb->len <= 4) {
-		DBG("%s: packet len is too small\n", ag->dev->name);
+//		DBG("%s: packet len is too small\n", ag->dev->name);
 		goto err_drop;
 	}
 
@@ -811,7 +807,7 @@ static netdev_tx_t ag71xx_hard_start_xmit(struct sk_buff *skb,
 	/* setup descriptor fields */
 	n = ag71xx_fill_dma_desc(ring, (u32) dma_addr, skb->len & ag->desc_pktlen_mask);
 	if (n < 0)
-		goto err_drop_unmap;
+		goto err_drop;
 
 	i = (ring->curr + n - 1) & ring_mask;
 	ring->buf[i].len = skb->len;
@@ -833,20 +829,17 @@ static netdev_tx_t ag71xx_hard_start_xmit(struct sk_buff *skb,
 	    ring_min *= AG71XX_TX_RING_DS_PER_PKT;
 
 	if (ring->curr - ring->dirty >= ring_size - ring_min) {
-		DBG("%s: tx queue full\n", dev->name);
+//		DBG("%s: tx queue full\n", dev->name);
 		netif_stop_queue(dev);
 	}
 
-	DBG("%s: packet injected into TX queue\n", ag->dev->name);
+//	DBG("%s: packet injected into TX queue\n", ag->dev->name);
 
 	/* enable TX engine */
 	ag71xx_wr(ag, AG71XX_REG_TX_CTRL, TX_CTRL_TXE);
 
 	return NETDEV_TX_OK;
 
-err_drop_unmap:
-	dma_unmap_single(&dev->dev, dma_addr, skb->len, DMA_TO_DEVICE);
-
 err_drop:
 	dev->stats.tx_dropped++;
 
@@ -960,7 +953,7 @@ static int ag71xx_tx_packets(struct ag71xx *ag, bool flush)
 	int bytes_compl = 0;
 	int n = 0;
 
-	DBG("%s: processing TX ring\n", ag->dev->name);
+//	DBG("%s: processing TX ring\n", ag->dev->name);
 
 	while (ring->dirty + n != ring->curr) {
 		unsigned int i = (ring->dirty + n) & ring_mask;
@@ -997,7 +990,7 @@ static int ag71xx_tx_packets(struct ag71xx *ag, bool flush)
 		}
 	}
 
-	DBG("%s: %d packets sent out\n", ag->dev->name, sent);
+//	DBG("%s: %d packets sent out\n", ag->dev->name, sent);
 
 	ag->dev->stats.tx_bytes += bytes_compl;
 	ag->dev->stats.tx_packets += sent;
@@ -1027,8 +1020,8 @@ static int ag71xx_rx_packets(struct ag71xx *ag, int limit)
 	struct sk_buff *skb;
 	int done = 0;
 
-	DBG("%s: rx packets, limit=%d, curr=%u, dirty=%u\n",
-			dev->name, limit, ring->curr, ring->dirty);
+//	DBG("%s: rx packets, limit=%d, curr=%u, dirty=%u\n",
+//			dev->name, limit, ring->curr, ring->dirty);
 
 	skb_queue_head_init(&queue);
 
@@ -1051,9 +1044,6 @@ static int ag71xx_rx_packets(struct ag71xx *ag, int limit)
 		pktlen = desc->ctrl & pktlen_mask;
 		pktlen -= ETH_FCS_LEN;
 
-		dma_unmap_single(&dev->dev, ring->buf[i].dma_addr,
-				 ag->rx_buf_size, DMA_FROM_DEVICE);
-
 		dev->stats.rx_packets++;
 		dev->stats.rx_bytes += pktlen;
 
@@ -1092,8 +1082,8 @@ next:
 		netif_receive_skb(skb);
 	}
 
-	DBG("%s: rx finish, curr=%u, dirty=%u, done=%d\n",
-		dev->name, ring->curr, ring->dirty, done);
+//	DBG("%s: rx finish, curr=%u, dirty=%u, done=%d\n",
+//		dev->name, ring->curr, ring->dirty, done);
 
 	return done;
 }
@@ -1113,7 +1103,7 @@ static int ag71xx_poll(struct napi_struct *napi, int limit)
 	pdata->ddr_flush();
 	tx_done = ag71xx_tx_packets(ag, false);
 
-	DBG("%s: processing RX ring\n", dev->name);
+//	DBG("%s: processing RX ring\n", dev->name);
 	rx_done = ag71xx_rx_packets(ag, limit);
 
 	ag71xx_debugfs_update_napi_stats(ag, rx_done, tx_done);
@@ -1138,8 +1128,8 @@ static int ag71xx_poll(struct napi_struct *napi, int limit)
 		if (status & TX_STATUS_PS)
 			goto more;
 
-		DBG("%s: disable polling mode, rx=%d, tx=%d,limit=%d\n",
-			dev->name, rx_done, tx_done, limit);
+//		DBG("%s: disable polling mode, rx=%d, tx=%d,limit=%d\n",
+//			dev->name, rx_done, tx_done, limit);
 
 		napi_complete(napi);
 
@@ -1151,8 +1141,8 @@ static int ag71xx_poll(struct napi_struct *napi, int limit)
 	}
 
 more:
-	DBG("%s: stay in polling mode, rx=%d, tx=%d, limit=%d\n",
-			dev->name, rx_done, tx_done, limit);
+//	DBG("%s: stay in polling mode, rx=%d, tx=%d, limit=%d\n",
+//			dev->name, rx_done, tx_done, limit);
 	return limit;
 
 oom:
@@ -1189,7 +1179,7 @@ static irqreturn_t ag71xx_interrupt(int irq, void *dev_id)
 
 	if (likely(status & AG71XX_INT_POLL)) {
 		ag71xx_int_disable(ag, AG71XX_INT_POLL);
-		DBG("%s: enable polling mode\n", dev->name);
+//		DBG("%s: enable polling mode\n", dev->name);
 		napi_schedule(&ag->napi);
 	}
 
-- 
2.12.1

